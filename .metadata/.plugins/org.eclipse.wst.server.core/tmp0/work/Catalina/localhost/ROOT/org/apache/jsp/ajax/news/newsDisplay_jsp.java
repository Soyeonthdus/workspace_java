/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-02-10 06:24:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax.news;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class newsDisplay_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>Insert title here</title>\r\n");
      out.write("  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("  <script>\r\n");
      out.write("  	const autoReload = () => {\r\n");
      out.write("  		console.log(\"autoReload 호출\")\r\n");
      out.write("  		//ajax함수는 jquery.min.js가 제공하는 api이다\r\n");
      out.write("  		//ajax함수는 결국 XMLHttpRequest대신함\r\n");
      out.write("  		//const ajax = new XMLHttpRequest();\r\n");
      out.write("  		//ajax.open(\"GET\", url, false)\r\n");
      out.write("  		//ajax.send()\r\n");
      out.write("  		 $.ajax({\r\n");
      out.write("  	          type: \"GET\", \r\n");
      out.write("  	          url: \"newsList.jsp\", //요청하고 있는 url페이지\r\n");
      out.write("  	          success: function (data) { //성공했을 때 \r\n");
      out.write("  	            //파라미터 data에는 boardSellAction.html처리된 결과를 담음 = .responseText\r\n");
      out.write("  	            //console.log(data);\r\n");
      out.write("  	            $(\"#d_news\").html(data);\r\n");
      out.write("  	          },\r\n");
      out.write("  	          fail:function(){\r\n");
      out.write("  	        	  console.log(\"error\")\r\n");
      out.write("  	          }\r\n");
      out.write("  	        });\r\n");
      out.write("  	}\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <script type = \"text/javascript\">\r\n");
      out.write("  //body 속에 있으므로 호출하지 않아도 자동실행\r\n");
      out.write("  //jquery(document)\r\n");
      out.write("  //window <- document <- ready(function(){실행문 : 변수선언, if문, switch문, i+j}) : 함수\r\n");
      out.write("  //{} : 객체 or 함수의 구현부\r\n");
      out.write("  	$(document).ready(()=>{\r\n");
      out.write("  		//실행문이 오는 자리\r\n");
      out.write("  		start = () =>{\r\n");
      out.write("  			setInterval(autoReload, 2000); //autoReload는 함수이다. 일급함수 //2초지연발생\r\n");
      out.write("  		}\r\n");
      out.write("  		//function start(){}\r\n");
      out.write("  		start(); //호출 \r\n");
      out.write("  	})//end of ready - DOM을 다 읽었으면\r\n");
      out.write("  </script>\r\n");
      out.write("  <div id = \"d_news\">뉴스 준비중...</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	html(단방향, 변수선언이나 제어문 지원 안됨, 이벤트 처리 불가)은 순차적으로 실행\r\n");
      out.write("	자바스크립트 코드의 위치에 따라서 document.querySelector(id or class or else)\r\n");
      out.write("	: 선언이 먼저\r\n");
      out.write("	자바스크립트 위치\r\n");
      out.write("	1) head 안에 - 전변선언, 함수선언 할 때(호출을 해야 실행이 됨)\r\n");
      out.write("		만일 자바스크립트의 처리를 지연시키고 싶을 때는 defer를 사용하여 DOM Tree가 다 그려질때까지 기다림\r\n");
      out.write("	2) body 안에 - 호출하지 않아도 실행됨 - 단 함수로 선언된 부분 제외\r\n");
      out.write("		body가 화면에 보이는 부분임. 화면의 역할은 듣기이다. 사용자가 입력한 것을 듣는 역할\r\n");
      out.write("		ID와 비번을 적고 누른다 -> Request\r\n");
      out.write("		\r\n");
      out.write("	자바스크립트로 화면을 그릴 수 있다 -> document.write(\"<font color = 'red' size = 18></font>\")\r\n");
      out.write("	write는 브라우저에 쓸 수 있게 해주는 명령어\r\n");
      out.write("	\r\n");
      out.write("	Java는 브라우저에 쓸 수 없다 -> System.out.prinln(<b>굵은 글씨</b>) 안됨\r\n");
      out.write("	\r\n");
      out.write("	그러나 서블릿은 브라우저에 쓸 수 있다 : out.print();  \r\n");
      out.write("	\r\n");
      out.write("	out.print(\"<font color = 'red' size =18>안녕</font>\"); //서버에서 처리해준다. HTML이다\r\n");
      out.write(" -->\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
